steps:
  - id: docker-login
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker login --username=$$USERNAME --password=$$PASSWORD']
    secretEnv: ['USERNAME', 'PASSWORD']

  - id: docker-build
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker build -t $$USERNAME/${_IMAGE_NAME}:${SHORT_SHA} .']
    secretEnv: ['USERNAME']
    waitFor:
      - "docker-login"

  - id: docker-push
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker push $$USERNAME/${_IMAGE_NAME}:${SHORT_SHA}']
    secretEnv: ['USERNAME']
    waitFor:
      - "docker-build"

  - id: deploy-to-eks
    name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Install necessary packages
        apk add --no-cache curl bash aws-cli kubectl

        # Setup AWS credentials
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/config
        echo "region = ${_AWS_REGION}" >> ~/.aws/config
        echo "output = json" >> ~/.aws/config
        echo "[profile gl-exploration]" >> ~/.aws/config
        echo "role_arn = ${_AWS_ROLE_ARN}" >> ~/.aws/config
        echo "source_profile = default" >> ~/.aws/config
        echo "skip_region_validation = true" >> ~/.aws/config
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = $$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        echo "[gl-exploration]" >> ~/.aws/credentials
        echo "aws_access_key_id = $$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

        aws configure list

        # Verify variables
        echo "REPO_NAME=${REPO_NAME}"
        echo "SHORT_SHA=${SHORT_SHA}"
        echo "_REGISTRY_URL=${_REGISTRY_URL}"
        echo "_PORT=${_PORT}"

        # Update kubeconfig to connect to EKS
        aws eks update-kubeconfig --name ${_AWS_CLUSTER} --region ${_AWS_REGION}

        # Determine the correct Kubernetes manifest to use based on the branch name
        if [[ "${BRANCH_NAME}" == "main" || "${BRANCH_NAME}" == "master" ]]; then
          cp ./k8s/production.yml ./k8s/deployment.yml
        elif [[ "${BRANCH_NAME}" == "staging" ]]; then
          cp ./k8s/staging.yml ./k8s/deployment.yml
        elif [[ "${BRANCH_NAME}" =~ ^staging_.*$ ]]; then
          cp ./k8s/staging.yml ./k8s/deployment.yml
        elif [[ "${BRANCH_NAME}" == "develop" ]]; then
          cp ./k8s/develop.yml ./k8s/deployment.yml
        elif [[ "${BRANCH_NAME}" =~ ^develop_.*$ ]]; then
          cp ./k8s/develop.yml ./k8s/deployment.yml
        else
          cp ./k8s/develop.yml ./k8s/deployment.yml
        fi

        # Update deployment manifest with the current build details
        sed -i "s|<PROJECT_NAME>|${REPO_NAME}|g" ./k8s/deployment.yml
        sed -i "s|<VERSION>|${SHORT_SHA}|g" ./k8s/deployment.yml
        sed -i "s|<IMAGE_NAME>|${_REGISTRY_URL}/${_IMAGE_NAME}:${SHORT_SHA}|g" ./k8s/deployment.yml
        sed -i "s|<PORT>|${_PORT}|g" ./k8s/deployment.yml

        # Deploy to EKS
        kubectl apply -f ./k8s/deployment.yml
    secretEnv: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']
    env:
      - 'AWS_DEFAULT_REGION=${_AWS_REGION}'
      - 'AWS_PROFILE=gl-exploration'
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
    waitFor:
      - "docker-push"

substitutions:
  _REGISTRY_URL: docker.io/reyshazni
  _PROJECT: intern-infra
  _CLUSTER: sandbox
  _ZONE: asia-southeast2-a
  _IMAGE_NAME: '${_PROJECT}-${REPO_NAME}-${BRANCH_NAME}'
  _PORT: '3000'
  _AWS_CLUSTER: sandbox-intern
  _AWS_REGION: us-east-1
  _AWS_ROLE_ARN: arn:aws:iam::302546992452:user/glair-exploration-rey-intern

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/GCB_DOCKER_PASSWORD/versions/latest
    env: 'PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/GCB_DOCKER_USERNAME/versions/latest
    env: 'USERNAME'
  - versionName: projects/$PROJECT_ID/secrets/AWS_ACCESS_KEY_ID/versions/latest
    env: 'AWS_ACCESS_KEY_ID'
  - versionName: projects/$PROJECT_ID/secrets/AWS_SECRET_ACCESS_KEY/versions/latest
    env: 'AWS_SECRET_ACCESS_KEY'